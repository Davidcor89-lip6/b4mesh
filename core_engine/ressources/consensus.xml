<?xml version="1.0" encoding="UTF-8" ?>
<node name="/net/qolsr/Consensus">
  <interface name="net.qolsr.Consensus">
    <!-- Get all key-values.

         Note that these are clean but unsequenced reads.  As a result, only
	 eventual consistency accross reachable nodes can be guaranted.
	 To validate that a value is still current, a transaction should be
	 used.
    -->
    <method name="GetAllValues">
      <!--
	A dict from key to (version, value, expiration)

	- version is an arbitrary string that you should copy as-is to use with
	other methods.  It matches [0-9a-f:.-]+
	- value is an array of byte with the last set value for this key.
	- expiration is a double indicating the time left before the expiration
	of the value.  May be infinite.

        The protocol ensures that one (key, version) corresponds
	to only one value.  There are however possible pathological cases where
        this does not hold, but they require that a node reboots and an event
	with a probability of one out of 65536 to happen.
      -->
      <arg name="output" direction="out" type="a{s(sayd)}"/>
    </method>

    <!-- Like GetAllValues, but for a single value.

	 If the value does not exist, then 'version' is the empty string.

	 Like GetAllValues, this is a clean but unsequenced read.  The value
	 may be stale but will eventually be consistent.
    -->
    <method name="GetValue">
      <!-- name of the key -->
      <arg name="name" type="s" direction="in"/>
      <!-- Arbitrary string indicating the version of the value.
           If name does not exist, this is an empty string.  Otherwise, it
	   is a string matching [0-9a-f:.-]+ -->
      <arg name="version" type="s" direction="out"/>
      <arg name="value" type="ay" direction="out"/>
      <!-- Amount of seconds remaining before this value expires.
           May be infinite.  -->
      <arg name="expiration" type="d" direction="out"/>
    </method>

    <!-- Signal used when the value is detected to have been changed.

	 This signal tracks the value returned by GetValue.

	 Note that while this signal will track all changes of GetValue, it
	 may not track all changes done in the database, because GetValue is
	 not sequenced.  The only guarantee is eventual consistency.

	 The parameters are the same as GetValue
    -->
    <signal name="ValueChanged">
      <arg name="name" type="s"/>
      <arg name="new_version" type="s"/>
      <arg name="new_value" type="ay"/>
      <arg name="expiration" type="d"/>
    </signal>

    <!-- Try to perform a transaction.

	 A transaction is like a Compare and Swap operation on multiple key and
	 values.

	 Calling this method will start the transaction asynchronously.
	 This method will return an arbitrary transaction_id.
	 Once the transaction succeeds or fail, the result is indicated through
	 the TransactionResult signal.

	 A transaction is done in two phases: All expected versions are
	 compared against the current version.  If they match, then all values
	 are atomically set to the specified value with the given expiration.
    -->
    <method name="DoTransaction">
      <!-- Indicate the actions to perform in this transaction.

	   It is a map from key names to (string expected_version,
					  byte[] new_value,
					  double new_expiration,
					  bool watch_for_modifications).


	   expected_version must be either
	   - an empty string, which indicates that the key must not previously
	     exist.
	   - the current version of the value, as returned by a signal or
	     method of this API.

        new_value is the new value to set, if new_expiration is not -1.

	new_expiration is the expiration to apply on the value, in seconds.
	The timing is very unprecise and it acts as a lower bound.
	An expiration of +inf indicates that the value never expires,
	an expiration of -1 indicate that the value must not be changed (value
	must be empty in this case) and an expiration of zero asks for the key
	to be deleted.  Expirations may be extended by setting the same value.

	if watch_for_modifications is true, then this adds a watch to the
	existing (if expiration == -1) or changed value.  When the version of
	the value changes, then the WatchResult signal is emitted.  Compared to
	the ValueChanged signal, WatchResult is guaranteed to be delivered to
	the IP address of the one that requested it and they are delivered
	in-order.  Deleted or non-existing keys cannot be watched for creation.
      -->
      <arg name="transaction" type="a{s(saydb)}" direction="in"/>
      <arg name="id" type="u" direction="out"/>
    </method>

    <!-- Like DoTransaction, for use with programming languages with limited
	 D-Bus support.
    -->
    <method name="DoTransactionSafe">
      <!--
	Indicate the actions to perform in this transaction.
	Each action is a string with the following format:
	"KEY VERSION VALUE expire=EXPIRATION" (change a key and add expiration)
	or
        "KEY VERSION VALUE" (change a key without expiration)
	or
	"KEY VERSION" (ensure that key exists with given version)

	each field is separated by one space character.
	KEY, VERSION and VALUE must be either an alphanumerical string without
	whitespace or a sequence of hexadecimal digits prefixed by "hex="
        e.g. hex=4c6f6c
	EXPIRATION must be an integer number of seconds.
      -->
      <arg name="transaction" type="as" direction="in"/>
      <arg name="id" type="u" direction="out"/>
    </method>
    <!--
      Indicates that a transaction either succeeded or failed.
      Note that this signal may be received before the changes or conflicting
      values can be seen by GetValue or GetAllValues.

      Note: If the transaction touches keys that were also watched by this
      node, then TransactionResult is emitted before WatchResult.
    -->
    <signal name="TransactionResult">
      <!-- Transaction identifier.  This is the number returned by
	   DoTransaction or DoTransactionSafe. -->
      <arg name="id" type="u"/>
      <!-- Whether the transaction succeeded or failed. -->
      <arg name="success" type="b"/>
      <!-- A map from key names to their current version.
           If the transaction succeeded, then this contains all keys touched by
           the transaction and their new versions.  Does not contain keys
	   deleted by the transaction or whose value didn't change.

	   If the transaction failed, then this contains keys with
	   conflicting versions.  If a required key does not exist then
	   it is present with an empty version.-->
      <arg name="changed_keys" type="a{ss}"/>
    </signal>
    <!--
      Indicates that one or more watched values have been changed.
      This signal is only sent for values which are watched by at least one
      user on D-Bus.  Watches are added through transactions.

      Note: like TransactionResult, these new values may not be immediately
      visible in GetValue and GetAllValues().

      Note: If a transaction made by this node changes a value which is also
      watched by this node, then TransactionResult is guaranteed to be emitted
      before WatchResult.
    -->
    <signal name="WatchResult">
      <!--
	Array of watched (key name, old version) that have changed versions.

	These keys are either deleted or have changed their version.

	Note: multiple versions of the same key may be present after merge
	events.  In any case, all of them do not exist anymore.
      -->
      <arg name="changed_keys_versions" type="a(ss)"/>
      <!--
        Map from key names to (version, value, expiration).  It matches the
	return type semantics of GetAllValues().

	This map contains the new values of keys in changed_keys_versions.
	If a key was deleted, then it is not present in this map, but is still
	in changed_keys_versions.
      -->
      <arg name="new_keys" type="a{s(sayd)}"/>
    </signal>

    <!-- Dump debug information about the internal state of the program. -->
    <method name="DebugDump">
      <!-- IP address of the current leader, or empty if none -->
      <arg name="leader" type="s" direction="out"/>
      <!--
        decrees stored inside consensusd.  There are four cases in which
	consensusd stores decrees:
	- committed decrees that have been committed by the leader or the
	  followers after winning a ballot.
	- proposed decrees are values that the node is trying to propose.  At
	  this stage, it was not sent to anyone, as the node is trying to
	  prepare a ballot to become a leader.
	- voted decrees are those that the node voted for.  Note that a leader
	  always vote for decrees that it is trying to pass.
	- unmerged decrees are decrees that evolved in parallel to the
	  committed decrees and need to be merged by a leader.

	The type is:

	array of [
	  string type ("committed", "voted", "proposed", "unmerged")
	  string version  (may be empty if the version isn't stored)
	  array(string) time_vector (array of versions)
	  dict of string key_name to values (
	    string version
	    array(byte) value
	    double remaining_time (as sent by the leader, may be zero or inf)
	    double remaining_since (elapsed time since remaining_time was last
				    received.  can be -inf if irrelevant)
	    array(string) watchers (IP addresses of node with a watch)
	  )
	]
      -->
      <arg name="decrees" type="a(ssasa{s(sayddas)})" direction="out"/>
      <!--
        transactions stored inside consensusd.
	consensusd stores transaction to send to the leader.  When this node
	is the leader, it also stores received transactions, which can be
	in three states:
	- received: the transaction was received and was not attempted yet,
	  because a ballot is pending
	- applied: the transaction was applied and a ballot is ongoing so that
	  the result can be committed.
	- rejected: the transaction failed to apply and a ballot is ongoing to
	  apply other changes.

	Note that when a node is a leader, its own transactions are never in
	the "received" state.

	The type is:

	array of [
	  string status = "submitted" (own transaction was sent to leader),
			  "received", "applied" or "rejected"
	  string sender (empty for self, else IP address of requester)
	  uint32_t id (chosen by requester at will)
	  dict of string key_name to transaction_item (
	    string expected version (empty if expected to not exist)
	    bool change_value_or_expiration (if false, ignore next two fields)
	    array(byte) new_value
	    double new_expiration
	    bool watch_the_value (true if the node want to watch the result)
	    string actual version (for applied/rejected trans)
	  )
	]
      -->
      <arg name="transactions" type="a(ssua{s(sbaydbs)})" direction="out"/>
    </method>
  </interface>
</node>


