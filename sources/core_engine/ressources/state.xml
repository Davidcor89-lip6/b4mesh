<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright (C) 2010-2020 Green Communications

Exposed state of the daemon
-->
<node name="/net/qolsr/Qolyester/State">
  <interface name="net.qolsr.Qolyester.State">
    <!--
	 Global state dump
    -->
    <method name="Dump">
      <!-- The neighbor set:
	   array {
	     bool	is_sym;
	     bool	is_mpr;
	     bool	is_mprsel;
	     string	main_address;
	     uint32	number_of_links;
	     double	mprsel_time;
	     byte	willingness;
	   } -->
      <arg name="neighbors" type="a(bbbsudy)" direction="out"/>
      <!-- The link set:
	   array {
	     byte	lost_sym_asym; // 0 = lost, 1 = asym, 2 = sym
	     string	local_address;
	     string	remote_address;
	     string	main_address;
	     string	mac_address;
	     uint64	sent_bytes;
	     uint32	sent_packets;
	     double	time;
	     double	asym_time;
	     double	sym_time;
	     double	lost_time;
	     bool	pending;
	     double	next_time;
	     double	quality;
	     double	queue_fill;
	   } -->
      <arg name="links" type="a(ysssstuddddbddd)" direction="out"/>
      <!-- The MID set:
	   array {
	     string	interface_address;
	     string	main_address; // or 0.0.0.0/:: for our own MIDs
	     double	time; // remaining time before expiration
	   } -->
      <arg name="mids" type="a(ssd)" direction="out"/>
      <!-- The HNA set:
	   array {
	     string			gateway;
	     string			network;
	     byte			prefix;
	     array { uint16 vlan; }	vlans;
	     double			time;
	   } -->
      <arg name="hnas" type="a(ssyaqd)" direction="out"/>
      <!-- The Gate set:
	   array {
	     string			network;
	     byte			prefix;
	     array { uint16 vlan; }	vlans;
	   } -->
      <arg name="gates" type="a(syaq)" direction="out"/>
      <!-- The station set:
	   array {
	     string	ip;
	     string	mac;
	     uint16	vlan;
	     uint16	asn;
	     bool	removed;
	     double	removed_time;
	   } -->
      <arg name="stations" type="a(ssqqbd)" direction="out"/>
      <!-- The association set:
	   array {
	     string	ip;
	     string	mac;
	     uint16	vlan;
	     string	ap;
	     uint16	asn;
	     bool	removed;
	     double	time;
	   } -->
      <arg name="associations" type="a(ssqsqbd)" direction="out"/>
      <!-- The route set:
	   array {
	     string	destination;
	     byte	prefix;
	     string	interface_or_next;
	     string	source;
	     uint16     vlan;
	   }
      -->
      <arg name="routes" type="a(syssq)" direction="out"/>
      <!-- The local topology:
	   array {
	     string	node_address;
	     byte	willingness;
	   };
	   array {
	     string	src_node_address;
	     string	local_iface_address;
	     string	dst_node_address;
	     string	remote_iface_address;
	     byte	link_state; // 0 = unspec, 1 = lost, 2 = asym, 3 = sym
	     byte	neighbor_state; // 0 = not, 1 = sym, 2 = mpr
	     double	next_time;
	     double	signal;
	     double	reverse_signal;
	   }
      -->
      <arg name="local_topology" type="(a(sy)a(ssssyyddd))" direction="out"/>
      <!-- The global topology:
	   array {
	     string	node_address;
	   };
	   array {
	     string	src_node_address;
	     string	dst_node_address;
	     uint16	ansn;
	     double	next_time;
	     double	signal;
	   }
      -->
      <arg name="global_topology" type="(asa(ssqdd))" direction="out"/>
      <!-- The interface set:
	   array {
	     uint32	index;
	     string	name;
	     string	address;
	     string	mac;
	     uint32	mtu;
	     bool	wired;
	   }
      -->
      <arg name="interfaces" type="a(usssub)" direction="out"/>
      <!-- The pending interface set:
	   array {
	     uint32	index;
	     string	name;
	     bool	wired;
	     bool	is_up;
	     bool	has_address;
	     }
      -->
      <arg name="pending_interfaces" type="a(usbbb)" direction="out"/>
    </method>
  </interface>
  <!--
      State of the set of interfaces
  -->
  <interface name="net.qolsr.Qolyester.Interfaces">
    <!-- A new interface has been added -->
    <signal name="Added">
      <arg name="name" type="s"/>	<!-- e.g. "wlan0" -->
      <arg name="address" type="s"/>	<!-- IP address of interface -->
    </signal>
    <!-- An interface has been removed -->
    <signal name="Removed">
      <arg name="name" type="s"/>	<!-- e.g. "wlan0" -->
      <arg name="address" type="s"/>	<!-- IP address of interface -->
    </signal>
    <!-- Retrieve a list of interfaces -->
    <method name="GetAll">
      <!-- array(interface name,
		 IP address of interface) -->
      <arg name="set" type="a(ss)" direction="out"/>
    </method>
    <!-- Add an interface dynamically -->
    <method name="Add">
      <arg name="name" type="s" direction="in"/>
      <arg name="address" type="s" direction="in"/>
    </method>
    <!-- Remove an interface dynamically -->
    <method name="Remove">
      <arg name="name" type="s" direction="in"/>
    </method>
  </interface>
  <!--
      State of the set of peer signals
  -->
  <interface name="net.qolsr.Qolyester.PeerSignals">
    <!-- Get a particular peer of a particular interface -->
    <method name="Get">
      <!-- The interface name -->
      <arg name="interface" type="s" direction="in"/>
      <!-- The peer's MAC address -->
      <arg name="remote" type="s" direction="in"/>
      <!-- The average signal power in dBm -->
      <arg name="signal" type="d" direction="out"/>
      <!-- The number of seconds the peer has been last seen -->
      <arg name="last_seen" type="d" direction="out"/>
    </method>
    <!-- Retrieve all the peer's signals of a particular interface -->
    <method name="GetAll">
      <!-- The interface name -->
      <arg name="interface" type="s" direction="in"/>
      <!-- array(peer's MAC address,
		 peer's average signal power in dBm,
		 number of seconds since peer was last seen) -->
      <arg name="signals" type="a(sdd)" direction="out"/>
    </method>
  </interface>
  <!--
      State of the set of pending interfaces
  -->
  <interface name="net.qolsr.Qolyester.PendingInterfaces">
    <!-- An interface becomes pending -->
    <signal name="Added">
      <arg name="name" type="s"/>	<!-- e.g. "wlan0" -->
      <arg name="address" type="s"/>	<!-- IP address of interface -->
    </signal>
    <!-- An interface ceases to be pending -->
    <signal name="Removed">
      <arg name="name" type="s"/>	<!-- e.g. "wlan0" -->
      <arg name="address" type="s"/>	<!-- IP address of interface -->
    </signal>
    <!-- Retrieve a list of pending interfaces -->
    <method name="GetAll">
      <!-- array(interface name,
		 IP address of interface,
		 whether interface is wired,
		 whether interface is up,
		 whether interface has its address assigned) -->
      <arg name="set" type="a(ssbbb)" direction="out"/>
    </method>
  </interface>
  <!--
      State of the set of links
  -->
  <interface name="net.qolsr.Qolyester.Links">
    <!-- A link has been added -->
    <signal name="Added">
      <arg name="local_address" type="s"/>	<!-- local interface IP -->
      <arg name="remote_address" type="s"/>	<!-- remote interface IP -->
      <arg name="main_address" type="s"/>	<!-- main IP of neighbor -->
    </signal>
    <!-- A link state has changed -->
    <signal name="Changed">
      <arg name="local_address" type="s"/>	<!-- local interface IP -->
      <arg name="remote_address" type="s"/>	<!-- remote interface IP -->
      <arg name="main_address" type="s"/>	<!-- main IP of neighbor -->
    </signal>
    <!-- A link has been removed -->
    <signal name="Removed">
      <arg name="local_address" type="s"/>	<!-- local interface IP -->
      <arg name="remote_address" type="s"/>	<!-- remote interface IP -->
      <arg name="main_address" type="s"/>	<!-- main IP of neighbor -->
    </signal>
    <!-- Retrieve information about a link -->
    <method name="Get">	<!-- identified by local and
			     remote interface IP addresses -->
      <arg name="local_address" type="s" direction="in"/>
      <arg name="remote_address" type="s" direction="in"/>
      <!-- The returned values are: -->
      <!-- * the main IP of the neighbor -->
      <arg name="main_address" type="s" direction="out"/>
      <!-- * the MAC address of the remote interface -->
      <arg name="mac_address" type="s" direction="out"/>
      <!-- * the quality of the link in the range (0, 1) -->
      <arg name="quality" type="d" direction="out"/>
      <!-- * whether the link is pending -->
      <arg name="pending" type="b" direction="out"/>
      <!-- * whether the link is symmetric -->
      <arg name="sym" type="b" direction="out"/>
      <!-- * the best-effort queue ID (used as minor of HTB class ID) -->
      <arg name="be_qid" type="q" direction="out"/>
    </method>
    <!-- Retrieve information about all links -->
    <method name="GetAll">
      <!-- array(local interface IP address,
		 remote interface IP address,
		 neighbor's main address,
		 remote interface MAC address,
		 link quality,
		 pending flag,
		 symmetric,
		 best-effort queue ID) -->
      <arg name="set" type="a(ssssdbbq)" direction="out"/>
    </method>
    <!-- Request synchronization of packet counters on links -->
    <method name="SyncCounters"/>
    <!-- Retrieve packet/byte counters for a link -->
    <method name="GetCounters">	<!-- identified by local and
				     remote interface IP addresses -->
      <arg name="local_address" type="s" direction="in"/>
      <arg name="remote_address" type="s" direction="in"/>
      <!-- The returned values are: -->
      <!-- * the total number of bytes sent -->
      <arg name="sent_bytes" type="t" direction="out"/>
      <!-- * the total number of packets sent -->
      <arg name="sent_packets" type="t" direction="out"/>
    </method>
    <!-- Retrieve summed packet/byte counters of all links -->
    <method name="GetAllCounters">
      <!-- Total number of bytes sent -->
      <arg name="sent_bytes" type="t" direction="out"/>
      <!-- Total number of packets send -->
      <arg name="sent_packets" type="t" direction="out"/>
    </method>
    <!-- Retrieve the ratio of queue fill for a link -->
    <method name="GetQueueFill"> <!-- identified by local and
				      remote interface IP addresses -->
      <arg name="local_address" type="s" direction="in"/>
      <arg name="remote_address" type="s" direction="in"/>
      <!-- The queue fill ratio in the range (0, 1) -->
      <arg name="queue_fill" type="d" direction="out"/>
    </method>
  </interface>
  <!--
      State of the set of neighbors
  -->
  <interface name="net.qolsr.Qolyester.Neighbors">
    <!-- A neighbor has been added -->
    <signal name="Added">
      <arg name="address" type="s"/>	<!-- neighbor's main IP address -->
    </signal>
    <!-- A neighbor has changed -->
    <signal name="Changed">
      <arg name="address" type="s"/>	<!-- neighbor's main IP address -->
    </signal>
    <!-- A neighbor has been removed -->
    <signal name="Removed">
      <arg name="address" type="s"/>	<!-- neighbor's main IP address -->
    </signal>
    <!-- Retrieve information about a neighbor -->
    <method name="Get">	<!-- identified by its main IP address -->
      <arg name="address" type="s" direction="in"/>
      <!-- Type of neighbor,
	     bits 0-1:
	       0: error,
	       1: not a neighbor (only asymmetric links),
	       2: normal neighbor (one or more symmetric links),
	       3: MPR neighbor (at least one symmetric link and MPR selector),
	     bit 2:
	       0: neighbor is not an MPR selector
	       1: neighbor is an MPR selector -->
      <arg name="type" type="y" direction="out"/>
      <!-- Willingness in the range (0, 7) -->
      <arg name="willingness" type="y" direction="out"/>
    </method>
    <!-- Retrieve information about all neighbors -->
    <method name="GetAll">
      <!-- array(main IP address,
		 type (bitfield, as above),
		 willingless) -->
      <arg name="set" type="a(syy)" direction="out"/>
    </method>
  </interface>
  <!--
      State of the MID set
      The MID advertized by this node are present in this set, with
      main address equal to 0.0.0.0 or ::, depending on the main address
      family.
  -->
  <interface name="net.qolsr.Qolyester.MIDs">
    <!-- A MID entry has been added -->
    <signal name="Added">
      <arg name="address" type="s"/>		<!-- interface IP address -->
      <arg name="main_address" type="s"/>	<!-- main IP address -->
    </signal>
    <!-- A MID entry has been removed -->
    <signal name="Removed">
      <arg name="address" type="s"/>		<!-- interface IP address -->
      <arg name="main_address" type="s"/>	<!-- main IP address -->
    </signal>
    <!-- Retrieve information about a MID entry -->
    <method name="Get">
      <!-- An interface IP address or main address, or 0.0.0.0/:: for
	   the advertized MIDs (depending on the main address family) -->
      <arg name="address" type="s" direction="in"/>
      <!-- The main IP address or an empty string
	   if the interface address is not present in the MID set -->
      <arg name="main_address" type="s" direction="out"/>
      <!-- array(interface IP address) -->
      <arg name="interface_addresses" type="as" direction="out"/>
    </method>
    <!-- Retrieve information about all MID entries -->
    <method name="GetAll">
      <!-- array(main IP address,
		 array(interface IP address)) -->
      <arg name="set" type="a(sas)" direction="out"/>
    </method>
  </interface>
  <!--
      State of the HNA and Gate set
  -->
  <interface name="net.qolsr.Qolyester.HNAs">
    <!-- An HNA entry has been added -->
    <signal name="Added">
      <arg name="network" type="s"/>		<!-- network IP address -->
      <arg name="prefix" type="y"/>		<!-- prefix length -->
      <arg name="vlans" type="aq"/>		<!-- list of vlans -->
      <arg name="gateway" type="s"/>		<!-- gateway IP address -->
    </signal>
    <!-- The VLANs associated with an HNA entry have changed -->
    <signal name="Changed">
      <arg name="network" type="s"/>		<!-- network IP address -->
      <arg name="prefix" type="y"/>		<!-- prefix length -->
      <arg name="vlans" type="aq"/>		<!-- list of vlans -->
      <arg name="gateway" type="s"/>		<!-- gateway IP address -->
    </signal>
    <!-- An HNA entry has been removed -->
    <signal name="Removed">
      <arg name="network" type="s"/>		<!-- network IP address -->
      <arg name="prefix" type="y"/>		<!-- prefix length -->
      <arg name="vlans" type="aq"/>		<!-- list of vlans -->
      <arg name="gateway" type="s"/>		<!-- gateway IP address -->
    </signal>
    <!-- Retrieve information about all HNA entries -->
    <method name="GetAll">
      <!-- array(network IP address,
		 prefix length,
		 list of vlans,
		 gateway IP address) -->
      <arg name="set" type="a(syaqs)" direction="out"/>
    </method>
  </interface>
  <!--
      State of the Gate set
  -->
  <interface name="net.qolsr.Qolyester.Gates">
    <!-- Add an entry -->
    <method name="Add">
      <arg name="network" type="s" direction="in"/> <!-- network IP address -->
      <arg name="prefix" type="y" direction="in"/>  <!-- prefix length -->
      <arg name="vlans" type="aq" direction="in"/>  <!-- list of vlans -->
    </method>
    <!-- Remove an entry -->
    <method name="Remove">
      <arg name="network" type="s" direction="in"/> <!-- network IP address -->
      <arg name="prefix" type="y" direction="in"/>  <!-- prefix length -->
      <arg name="vlans" type="aq" direction="in"/>  <!-- list of vlans -->
    </method>
  </interface>
  <!--
      State of the local topology
  -->
  <interface name="net.qolsr.Qolyester.LocalTopology">
    <!-- A link has been added -->
    <signal name="Added">
      <arg name="address_main_src" type="s"/>	<!-- source main IP -->
      <arg name="address_main_dst" type="s"/>	<!-- destination main IP -->
      <arg name="address_link_src" type="s"/>	<!-- source iface IP -->
      <arg name="address_link_dst" type="s"/>	<!-- destination iface IP -->
      <!-- link type:
	     0: UNSPEC_LINK,
	     1: ASYM_LINK,
	     2: SYM_LINK,
	     3: LOST_LINK. -->
      <arg name="link_type" type="y"/>
      <!-- neighbor type:
	     0: NOT_NEIGH,
	     1: SYM_NEIGH,
	     2: MPR_NEIGH. -->
      <arg name="neighbor_type" type="y"/>
    </signal>
    <!-- A link has changed -->
    <signal name="Changed">
      <arg name="address_main_src" type="s"/>	<!-- as above -->
      <arg name="address_main_dst" type="s"/>	<!-- as above -->
      <arg name="address_link_src" type="s"/>	<!-- as above -->
      <arg name="address_link_dst" type="s"/>	<!-- as above -->
      <arg name="link_type" type="y"/>		<!-- as above -->
      <arg name="neighbor_type" type="y"/>	<!-- as above -->
    </signal>
    <!-- A link has been removed -->
    <signal name="Removed">
      <arg name="address_main_src" type="s"/>	<!-- as above -->
      <arg name="address_main_dst" type="s"/>	<!-- as above -->
      <arg name="address_link_src" type="s"/>	<!-- as above -->
      <arg name="address_link_dst" type="s"/>	<!-- as above -->
    </signal>
    <!-- Retrieve information about a node -->
    <method name="GetNode">
      <arg name="address" type="s" direction="in"/>	<!-- main IP address -->
      <arg name="willingness" type="y" direction="out"/> <!-- willingness -->
    </method>
    <!-- Retrieve information about links between two nodes -->
    <method name="GetLinks">	<!-- identified by source and
				     destination main IP addresses -->
      <arg name="address_src" type="s" direction="in"/>
      <arg name="address_dst" type="s" direction="in"/>
      <!-- array(source interface IP address,
		 destination interface IP address,
		 link type,
		 neighbor type) -->
      <arg name="set" type="a(ssyy)" direction="out"/>
    </method>
    <!-- Retrieve information about all links -->
    <method name="GetAll">
      <!-- array(1: source main IP address,
		 2: destination main IP address,
		 3: source interface IP address,
		 4: destination interface IP address,
		 5: link type,
		 6: neighbor type) -->
      <arg name="set" type="a(ssssyy)" direction="out"/>
    </method>
    <!-- Retrieve information about link metrics -->
    <method name="GetMetrics">
      <!-- array(1: source interface IP address,
		 2: destination interface IP address,
		 3: signal power (-inf on init, inf on wired links) -->
      <arg name="metrics" type="a(ssd)" direction="out"/>
    </method>
    <!-- Force set signal of a link -->
    <method name="OverrideReceivedSignal">
      <!-- identified by source and destination interface addresses -->
      <arg name="address_src" type="s" direction="in"/>
      <arg name="address_dst" type="s" direction="in"/>
      <!-- Signal in dBm -->
      <arg name="signal" type="d" direction="in"/>
    </method>
  </interface>
  <!--
      State of the global topology
  -->
  <interface name="net.qolsr.Qolyester.GlobalTopology">
    <!-- A link has been added -->
    <signal name="Added">
      <arg name="address_src" type="s"/>	<!-- source node IP -->
      <arg name="address_dst" type="s"/>	<!-- destination node IP  -->
    </signal>
    <!-- A link has been removed -->
    <signal name="Removed">
      <arg name="address_src" type="s"/>	<!-- source node IP -->
      <arg name="address_dst" type="s"/>	<!-- destination node IP -->
    </signal>
    <!-- Retrieve information about all links -->
    <method name="GetAll">
      <!-- array(source node IP address,
		 destination node IP address) -->
      <arg name="set" type="a(ss)" direction="out"/>
    </method>
    <!-- Retrieve metrics information about all links -->
    <method name="GetMetrics">
      <!-- array(source node IP address,
		 destination node IP address,
		 signal power in dBm
		   (-inf on init, inf for wired links) -->
      <arg name="caps" type="a(ssd)" direction="out"/>
    </method>
  </interface>
  <!--
      State of the nodes of the backhaul for which there is a route.

      A node of the backhaul becomes reachable as soon as a route for its main
      address is known and it remains so until the route for its main address
      is removed.  If a route for its main address is changed in any way
      (e.g. it changes from direct to indirect or vice-versa, or its next-hop
      changes) the node remains reachable and no signal is sent.

      Interface addresses which are not main addresses are ignored.  But note
      that there is a possibility that what was considered a main address and
      thus an entirely separate node may turn out to be the interface address
      of another node.  In that case, the formerly-thought-as-main-address is
      signalled as Removed, just as if the node had disappeared from the
      network.

      The Added signal is sent *after* the route the node has been added to the
      kernel, so a receiver may send packets to that destination immediately.
  -->
  <interface name="net.qolsr.Qolyester.ReachableNodes">
    <!-- Retrieve all the reachable nodes -->
    <method name="GetAll">
      <arg name="set" type="as" direction="out"/>
    </method>
    <!-- Retrieve the metric associated with a node.  If the node is
	 either unreachable or unknown, return the maximum value for
	 the metric, i.e. width of -inf and UINT_MAX. -->
    <method name="GetMetric">
      <!-- 'true' to get the forward metric (the metric from this host toward
	   the node), 'false' to get the reverse metric (the metric from the
	   node toward this host) -->
      <arg name="forward" type="b" direction="in"/>
      <arg name="address" type="s" direction="in"/>
      <arg name="width" type="d" direction="out"/>
      <arg name="hops" type="u" direction="out"/>
    </method>
    <!-- Retrieve metrics associated with all reachable nodes.  -->
    <method name="GetMetrics">
      <!-- 'true' to get the forward metric (the metric from this host toward
	   the node), 'false' to get the reverse metric (the metric from the
	   node toward this host) -->
      <arg name="forward" type="b" direction="in"/>
      <!-- array(node address, width, hops) -->
      <arg name="metrics" type="a(sdu)" direction="out"/>
    </method>
    <!-- A reachable node has appeared -->
    <signal name="Added">
      <arg name="address" type="s"/>
    </signal>
    <!-- A reachable node has disappeared -->
    <signal name="Removed">
      <arg name="address" type="s"/>
    </signal>
  </interface>
  <!--
      State of the excluded MAC addresses list
  -->
  <interface name="net.qolsr.Qolyester.ExcludedMACs">
    <!-- Retrieve list of excluded MAC addresses -->
    <method name="GetList">
      <!-- array(MAC address) -->
      <arg name="list" type="as" direction="out"/>
    </method>
    <!-- Add an entry -->
    <method name="Add">
      <arg name="mac_address" type="s" direction="in"/>
    </method>
    <!-- Remove an entry -->
    <method name="Remove">
      <arg name="mac_address" type="s" direction="in"/>
    </method>
  </interface>
  <!--
      State of the Stations set
  -->
  <interface name="net.qolsr.Qolyester.Stations">
    <!-- Add an entry -->
    <method name="Add">
      <arg name="mac_address" type="s" direction="in"/>
      <arg name="ip_address" type="s" direction="in"/>
      <!-- VLAN identifier -->
      <arg name="vlan" type="q" direction="in"/>
    </method>
    <!-- Remove an entry -->
    <method name="Remove">
      <arg name="mac_address" type="s" direction="in"/>
      <arg name="vlan" type="q" direction="in"/>
    </method>
  </interface>
  <!--
      State of the Associations set
  -->
  <interface name="net.qolsr.Qolyester.Associations">
    <!-- Retrieve an entry using IP address -->
    <method name="GetByIP">
      <arg name="ip_address" type="s" direction="in"/>
      <!-- Identifier of the VLAN the client belongs to -->
      <arg name="vlan" type="q" direction="in"/>
      <!-- MAC address of the client -->
      <arg name="mac_address" type="s" direction="out"/>
      <!-- IP address of the AP to which the client is associated -->
      <arg name="ap_address" type="s" direction="out"/>
    </method>
    <!-- Retrieve an entry using MAC address -->
    <method name="GetByMAC">
      <arg name="mac_address" type="s" direction="in"/>
      <!-- Identifier of the VLAN the client belongs to -->
      <arg name="vlan" type="q" direction="in"/>
      <!-- IP address of the client -->
      <arg name="ip_address" type="s" direction="out"/>
      <!-- IP address of the AP to which the client is associated -->
      <arg name="ap_address" type="s" direction="out"/>
    </method>
    <!-- Retrieve a list of clients associated to an AP -->
    <method name="GetByAP">
      <!-- IP address of the AP -->
      <arg name="ap_address" type="s" direction="in"/>
      <!-- Identifier of the VLAN the clients belongs to -->
      <arg name="vlan" type="q" direction="in"/>
      <!-- array(client IP address, client MAC address) -->
      <arg name="set" type="a(ss)" direction="out"/>
    </method>
    <method name="GetAll">
      <!-- array(ap, array(sta_ip, sta_mac, vlan))
	   localhost is represented as 0.0.0.0 -->
      <arg name="set" type="a(sa(ssq))" direction="out"/>
    </method>
    <!-- A new entry has been added -->
    <signal name="Added">
      <!-- Client MAC address -->
      <arg name="new_mac_address" type="s"/>
      <!-- Client IP address -->
      <arg name="new_ip_address" type="s"/>
      <!-- Identifier of the VLAN the client belongs to -->
      <arg name="vlan" type="q"/>
      <!-- Client's AP IP address -->
      <arg name="new_ap_address" type="s"/>
    </signal>
    <!-- An entry has been removed -->
    <signal name="Removed">
      <!-- Client MAC address -->
      <arg name="old_mac_address" type="s"/>
      <!-- Client IP address -->
      <arg name="old_ip_address" type="s"/>
      <!-- Identifier of the VLAN the client belongs to -->
      <arg name="vlan" type="q"/>
      <!-- Client's AP IP address -->
      <arg name="old_ap_address" type="s"/>
    </signal>
  </interface>
  <!--
      State of the VLANs
  -->
  <interface name="net.qolsr.Qolyester.VLANs">
    <!-- Retrieve a list of actual VLANs -->
    <method name="GetAll">
      <arg name="vlans" type="aq" direction="out"/>
    </method>
    <!-- Retrieve a list of actual VLANs that are locally required -->
    <method name="GetAllLocal">
      <arg name="vlans" type="aq" direction="out"/>
    </method>
    <!-- A new VLAN has been added -->
    <signal name="Added">
      <!-- VLAN ID -->
      <arg name="id" type="q"/>
    </signal>
    <!-- A VLAN has been removed -->
    <signal name="Removed">
      <!-- VLAN ID -->
      <arg name="id" type="q"/>
    </signal>
    <!-- Add a locally required VLAN -->
    <method name="AddLocal">
      <arg name="vlan" type="q" direction="in"/>
    </method>
    <!-- Remove a locally required VLAN -->
    <method name="RemoveLocal">
      <arg name="vlan" type="q" direction="in"/>
    </method>
  </interface>
  <!--
      State of the log system
  -->
  <interface name="net.qolsr.Qolyester.Log">
    <!-- Open stderr with level and tags -->
    <method name="OpenStderr">
      <!-- Set to true if level is to be ignored -->
      <arg name="unlevelled" type="b" direction="in"/>
      <arg name="level" type="u" direction="in"/>
      <arg name="tags" type="s" direction="in"/>
    </method>
    <!-- Open syslog with level and tags -->
    <method name="OpenSyslog">
      <!-- Set to true if level is to be ignored -->
      <arg name="unlevelled" type="b" direction="in"/>
      <arg name="level" type="u" direction="in"/>
      <arg name="tags" type="s" direction="in"/>
    </method>
    <!-- Open file with level, tags and timestamps -->
    <method name="OpenFile">
      <!-- Set to true if level is to be ignored -->
      <arg name="unlevelled" type="b" direction="in"/>
      <arg name="level" type="u" direction="in"/>
      <arg name="tags" type="s" direction="in"/>
      <arg name="timestamps" type="b" direction="in"/>
      <arg name="filename" type="s" direction="in"/>
    </method>
    <!-- Close stderr -->
    <method name="CloseStderr"/>
    <!-- Close syslog -->
    <method name="CloseSyslog"/>
    <!-- Close file -->
    <method name="CloseFile">
      <arg name="filename" type="s" direction="in"/>
    </method>
    <!-- Retrieve the list of open file names -->
    <method name="GetFiles">
      <arg name="names" type="as" direction="out"/>
    </method>
  </interface>
  <!--
      State of various parameters of the daemon
  -->
  <interface name="net.qolsr.Qolyester.Parameters">
    <!-- Request termination of the daemon -->
    <method name="Quit"/>
    <!-- Retrieve daemon's main IP address -->
    <method name="GetMainAddress">
      <arg name="main_address" type="s" direction="out"/>
    </method>
    <!-- Retrieve various routing parameters -->
    <method name="GetRoutingParameters">
      <!-- The priority of routes added by the daemon -->
      <arg name="route_priority" type="u" direction="out"/>
      <!-- The scope of routes added by the daemon -->
      <arg name="route_scope" type="y" direction="out"/>
      <!-- The routing realm in which routes belong -->
      <arg name="route_realm" type="q" direction="out"/>
      <!-- The routing table where routes to other nodes and VLAN 0
	   are added -->
      <arg name="routing_table" type="u" direction="out"/>
      <!-- The base routing table for non-zero VLAN-related routes -->
      <arg name="vlan_routing_table_base" type="u" direction="out"/>
    </method>
    <!-- Change the dump interval -->
    <method name="SetDumpInterval">
      <!-- The dump interval in seconds -->
      <arg name="interval" type="d" direction="in"/>
    </method>
    <!-- Trigger mac layer station refresh if applicable -->
    <method name="RefreshStations">
      <!-- The name of the interface on which to refresh (empty for all). -->
      <arg name="name" type="s" direction="in"/>
    </method>
    <!-- Main IP address of the daemon has changed -->
    <signal name="MainAddressChanged">
      <!-- New main IP address -->
      <arg name="main_address" type="s"/>
    </signal>
  </interface>
</node>

